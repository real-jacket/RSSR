import React from 'react';
import { renderToString } from 'react-dom/server';
import { Helmet } from 'react-helmet';
import { StaticRouter } from 'react-router';
import App from '../../client/router';
import routerList, { matchRoute } from '../../client/router/router-config';
import { ChunkExtractor } from '@loadable/server';
import * as path from 'path';
import proConfig from '../../share/pro-config';
import StyleContext from 'isomorphic-style-loader/StyleContext';

// // 导入资源处理库
// const getAssets = require('../common/asset');

// // 绑定资源
// const assetMap = getAssets();

// This is the stats file generated by webpack loadable plugin
// const statsFile = path.resolve(__dirname, './loadable-stats.json');
// // We create an extractor from the statsFile
// const extractor = new ChunkExtractor({ statsFile });

// This is the stats file generated by webpack loadable plugin
const webStatsFile = path.resolve(__dirname, '../static/loadable-stats.json');
// We create an extractor from the statsFile
const webExtractor = new ChunkExtractor({
  statsFile: webStatsFile,
});

export default async (ctx, next) => {
  const path = ctx.request.path;

  if (path.indexOf('.') > -1) {
    // ctx.body = null;
    return next();
  }

  console.log('ctx.request.path', path);

  // 查找到的目标路由对象
  let targetRoute = matchRoute(path, routerList);

  // 数据预取 -> fetchResult
  // 注意： 懒加载后路由数据结构发生了变化，需要主要 load 来获取正确的方法，这个地方数据的获取需要再优化一下
  let fetchDAtaFn = (await targetRoute.component.load()).default
    .getInitialProps;

  let fetchResult = {};
  if (fetchDAtaFn) {
    fetchResult = await fetchDAtaFn();
  }

  // 将预取数据放在这里传递过去 组内通过 props.staticContext 获取
  const context = {
    initialData: fetchResult,
  };

  let { page } = fetchResult || {};

  let tdk = {
    title: '默认标题',
    keywords: '默认关键词',
    description: '默认描述',
  };

  if (page && page.tdk) {
    tdk = {
      ...tdk,
      ...page.tdk,
    };
  }

  const css = new Set();
  const insertCss = (...styles) =>
    styles.forEach((style) => css.add(style._getCss()));

  console.log('css: ', css);

  const jsx = webExtractor.collectChunks(
    <StaticRouter location={path} context={context}>
      <StyleContext.Provider value={{ insertCss }}>
        <App routerList={routerList} />
      </StyleContext.Provider>
    </StaticRouter>
  );

  const html = renderToString(jsx);

  const helmet = Helmet.renderStatic();

  ctx.body = `
    <!DOCTYPE html>
    <html lang="en">
      <head>
        <meta charset="UTF-8">
        ${helmet.title.toString()}
        ${helmet.meta.toString()}
        ${webExtractor.getStyleTags()}
        <style>${[...css].join('')}</style>
      </head>
      <body>
        <div id="root">${html}</div>
        <textarea id="ssrTextInitData" style="display:none;">
        ${JSON.stringify(fetchResult)}
        </textarea>
      </body>
      <script>
        window.__IS_SSR__=${proConfig.__IS_SSR__};
      </script>
      ${webExtractor.getScriptTags()}
    </html>
    `;

  return next();
};
